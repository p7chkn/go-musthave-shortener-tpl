// Code generated by mockery v2.10.4. DO NOT EDIT.

package handlers

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"

	responses "github.com/p7chkn/go-musthave-shortener-tpl/internal/app/responses"
)

// MockUserUseCaseInterface is an autogenerated mock type for the URLServiceInterface type
type MockUserUseCaseInterface struct {
	mock.Mock
}

// CreateBatch provides a mock function with given fields: ctx, urls, userId
func (_m *MockUserUseCaseInterface) CreateBatch(ctx context.Context, urls []responses.ManyPostURL, userID string) ([]responses.ManyPostResponse, error) {
	ret := _m.Called(ctx, urls, userID)

	var r0 []responses.ManyPostResponse
	if rf, ok := ret.Get(0).(func(context.Context, []responses.ManyPostURL, string) []responses.ManyPostResponse); ok {
		r0 = rf(ctx, urls, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]responses.ManyPostResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []responses.ManyPostURL, string) error); ok {
		r1 = rf(ctx, urls, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateURL provides a mock function with given fields: ctx, longURL, user
func (_m *MockUserUseCaseInterface) CreateURL(ctx context.Context, longURL string, user string) (string, error) {
	ret := _m.Called(ctx, longURL, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, longURL, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, longURL, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBatch provides a mock function with given fields: urls, userId
func (_m *MockUserUseCaseInterface) DeleteBatch(urls []string, userId string) {
	_m.Called(urls, userId)
}

// GetStats provides a mock function with given fields: ctx, ip
func (_m *MockUserUseCaseInterface) GetStats(ctx context.Context, ip net.IP) (bool, responses.StatResponse, error) {
	ret := _m.Called(ctx, ip)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, net.IP) bool); ok {
		r0 = rf(ctx, ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 responses.StatResponse
	if rf, ok := ret.Get(1).(func(context.Context, net.IP) responses.StatResponse); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Get(1).(responses.StatResponse)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, net.IP) error); ok {
		r2 = rf(ctx, ip)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetURL provides a mock function with given fields: ctx, userID
func (_m *MockUserUseCaseInterface) GetURL(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersURL provides a mock function with given fields: ctx, userId
func (_m *MockUserUseCaseInterface) GetUserURL(ctx context.Context, userId string) ([]responses.GetURL, error) {
	ret := _m.Called(ctx, userId)

	var r0 []responses.GetURL
	if rf, ok := ret.Get(0).(func(context.Context, string) []responses.GetURL); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]responses.GetURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingDB provides a mock function with given fields: ctx
func (_m *MockUserUseCaseInterface) PingDB(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
