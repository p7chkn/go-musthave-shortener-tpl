// Code generated by mockery v2.9.4. DO NOT EDIT.

package handlers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type MockRepositoryInterface struct {
	mock.Mock
}

// AddManyURL provides a mock function with given fields: urls, user, ctx
func (_m *MockRepositoryInterface) AddManyURL(urls []ManyPostURL, user string, ctx context.Context) ([]ManyPostResponse, error) {
	ret := _m.Called(urls, user, ctx)

	var r0 []ManyPostResponse
	if rf, ok := ret.Get(0).(func([]ManyPostURL, string, context.Context) []ManyPostResponse); ok {
		r0 = rf(urls, user, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ManyPostResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]ManyPostURL, string, context.Context) error); ok {
		r1 = rf(urls, user, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddURL provides a mock function with given fields: longURL, shortURL, user, ctx
func (_m *MockRepositoryInterface) AddURL(longURL string, shortURL string, user string, ctx context.Context) error {
	ret := _m.Called(longURL, shortURL, user, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, context.Context) error); ok {
		r0 = rf(longURL, shortURL, user, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetURL provides a mock function with given fields: shortURL, ctx
func (_m *MockRepositoryInterface) GetURL(shortURL string, ctx context.Context) (string, error) {
	ret := _m.Called(shortURL, ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, context.Context) string); ok {
		r0 = rf(shortURL, ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(shortURL, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserURL provides a mock function with given fields: user, ctx
func (_m *MockRepositoryInterface) GetUserURL(user string, ctx context.Context) ([]ResponseGetURL, error) {
	ret := _m.Called(user, ctx)

	var r0 []ResponseGetURL
	if rf, ok := ret.Get(0).(func(string, context.Context) []ResponseGetURL); ok {
		r0 = rf(user, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ResponseGetURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(user, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *MockRepositoryInterface) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
