// Code generated by mockery v2.9.4. DO NOT EDIT.

package handlers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type MockRepositoryInterface struct {
	mock.Mock
}

// AddManyURL provides a mock function with given fields: ctx, urls, user
func (_m *MockRepositoryInterface) AddManyURL(ctx context.Context, urls []ManyPostURL, user string) ([]ManyPostResponse, error) {
	ret := _m.Called(ctx, urls, user)

	var r0 []ManyPostResponse
	if rf, ok := ret.Get(0).(func(context.Context, []ManyPostURL, string) []ManyPostResponse); ok {
		r0 = rf(ctx, urls, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ManyPostResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []ManyPostURL, string) error); ok {
		r1 = rf(ctx, urls, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddURL provides a mock function with given fields: ctx, longURL, shortURL, user
func (_m *MockRepositoryInterface) AddURL(ctx context.Context, longURL string, shortURL string, user string) error {
	ret := _m.Called(ctx, longURL, shortURL, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, longURL, shortURL, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteManyURL provides a mock function with given fields: ctx, urls, user
func (_m *MockRepositoryInterface) DeleteManyURL(ctx context.Context, urls []string, user string) error {
	ret := _m.Called(ctx, urls, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) error); ok {
		r0 = rf(ctx, urls, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetURL provides a mock function with given fields: ctx, shortURL
func (_m *MockRepositoryInterface) GetURL(ctx context.Context, shortURL string) (string, error) {
	ret := _m.Called(ctx, shortURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserURL provides a mock function with given fields: ctx, user
func (_m *MockRepositoryInterface) GetUserURL(ctx context.Context, user string) ([]ResponseGetURL, error) {
	ret := _m.Called(ctx, user)

	var r0 []ResponseGetURL
	if rf, ok := ret.Get(0).(func(context.Context, string) []ResponseGetURL); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ResponseGetURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *MockRepositoryInterface) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
