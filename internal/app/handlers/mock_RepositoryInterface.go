// Code generated by mockery v2.9.4. DO NOT EDIT.

package handlers

import mock "github.com/stretchr/testify/mock"

// MockRepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type MockRepositoryInterface struct {
	mock.Mock
}

// AddManyURL provides a mock function with given fields: urls, user
func (_m *MockRepositoryInterface) AddManyURL(urls []ManyPostURL, user string) ([]ManyPostResponse, error) {
	ret := _m.Called(urls, user)

	var r0 []ManyPostResponse
	if rf, ok := ret.Get(0).(func([]ManyPostURL, string) []ManyPostResponse); ok {
		r0 = rf(urls, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ManyPostResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]ManyPostURL, string) error); ok {
		r1 = rf(urls, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddURL provides a mock function with given fields: longURL, shortURL, user
func (_m *MockRepositoryInterface) AddURL(longURL string, shortURL string, user string) error {
	ret := _m.Called(longURL, shortURL, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(longURL, shortURL, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetURL provides a mock function with given fields: shortURL
func (_m *MockRepositoryInterface) GetURL(shortURL string) (string, error) {
	ret := _m.Called(shortURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(shortURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserURL provides a mock function with given fields: user
func (_m *MockRepositoryInterface) GetUserURL(user string) ([]ResponseGetURL, error) {
	ret := _m.Called(user)

	var r0 []ResponseGetURL
	if rf, ok := ret.Get(0).(func(string) []ResponseGetURL); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ResponseGetURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *MockRepositoryInterface) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
